// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "companies/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CompanyService is an autogenerated mock type for the CompanyService type
type CompanyService struct {
	mock.Mock
}

// CreateCompany provides a mock function with given fields: ctx, companyInput
func (_m *CompanyService) CreateCompany(ctx context.Context, companyInput models.CompanyInput) (models.CompanyOutput, error) {
	ret := _m.Called(ctx, companyInput)

	if len(ret) == 0 {
		panic("no return value specified for CreateCompany")
	}

	var r0 models.CompanyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CompanyInput) (models.CompanyOutput, error)); ok {
		return rf(ctx, companyInput)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CompanyInput) models.CompanyOutput); ok {
		r0 = rf(ctx, companyInput)
	} else {
		r0 = ret.Get(0).(models.CompanyOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CompanyInput) error); ok {
		r1 = rf(ctx, companyInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCompany provides a mock function with given fields: ctx, companyId
func (_m *CompanyService) DeleteCompany(ctx context.Context, companyId uuid.UUID) error {
	ret := _m.Called(ctx, companyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCompany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, companyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCompany provides a mock function with given fields: ctx, companyId
func (_m *CompanyService) GetCompany(ctx context.Context, companyId uuid.UUID) (models.CompanyOutput, error) {
	ret := _m.Called(ctx, companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetCompany")
	}

	var r0 models.CompanyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.CompanyOutput, error)); ok {
		return rf(ctx, companyId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.CompanyOutput); ok {
		r0 = rf(ctx, companyId)
	} else {
		r0 = ret.Get(0).(models.CompanyOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchCompany provides a mock function with given fields: ctx, companyId, updateCompanyInput
func (_m *CompanyService) PatchCompany(ctx context.Context, companyId uuid.UUID, updateCompanyInput models.UpdateCompanyInput) (models.CompanyOutput, error) {
	ret := _m.Called(ctx, companyId, updateCompanyInput)

	if len(ret) == 0 {
		panic("no return value specified for PatchCompany")
	}

	var r0 models.CompanyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.UpdateCompanyInput) (models.CompanyOutput, error)); ok {
		return rf(ctx, companyId, updateCompanyInput)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.UpdateCompanyInput) models.CompanyOutput); ok {
		r0 = rf(ctx, companyId, updateCompanyInput)
	} else {
		r0 = ret.Get(0).(models.CompanyOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.UpdateCompanyInput) error); ok {
		r1 = rf(ctx, companyId, updateCompanyInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCompanyService creates a new instance of CompanyService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCompanyService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CompanyService {
	mock := &CompanyService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
