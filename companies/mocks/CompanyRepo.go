// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "companies/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CompanyRepo is an autogenerated mock type for the CompanyRepo type
type CompanyRepo struct {
	mock.Mock
}

// CreateCompany provides a mock function with given fields: ctx, company
func (_m *CompanyRepo) CreateCompany(ctx context.Context, company models.Company) (uuid.UUID, error) {
	ret := _m.Called(ctx, company)

	if len(ret) == 0 {
		panic("no return value specified for CreateCompany")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Company) (uuid.UUID, error)); ok {
		return rf(ctx, company)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Company) uuid.UUID); ok {
		r0 = rf(ctx, company)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Company) error); ok {
		r1 = rf(ctx, company)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCompany provides a mock function with given fields: ctx, companyId
func (_m *CompanyRepo) DeleteCompany(ctx context.Context, companyId uuid.UUID) error {
	ret := _m.Called(ctx, companyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCompany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, companyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCompany provides a mock function with given fields: ctx, companyId
func (_m *CompanyRepo) GetCompany(ctx context.Context, companyId uuid.UUID) (models.Company, error) {
	ret := _m.Called(ctx, companyId)

	if len(ret) == 0 {
		panic("no return value specified for GetCompany")
	}

	var r0 models.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.Company, error)); ok {
		return rf(ctx, companyId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.Company); ok {
		r0 = rf(ctx, companyId)
	} else {
		r0 = ret.Get(0).(models.Company)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, companyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchCompany provides a mock function with given fields: ctx, companyId, company
func (_m *CompanyRepo) PatchCompany(ctx context.Context, companyId uuid.UUID, company models.UpdateCompanyInput) (models.Company, error) {
	ret := _m.Called(ctx, companyId, company)

	if len(ret) == 0 {
		panic("no return value specified for PatchCompany")
	}

	var r0 models.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.UpdateCompanyInput) (models.Company, error)); ok {
		return rf(ctx, companyId, company)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.UpdateCompanyInput) models.Company); ok {
		r0 = rf(ctx, companyId, company)
	} else {
		r0 = ret.Get(0).(models.Company)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.UpdateCompanyInput) error); ok {
		r1 = rf(ctx, companyId, company)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCompanyRepo creates a new instance of CompanyRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCompanyRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *CompanyRepo {
	mock := &CompanyRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
